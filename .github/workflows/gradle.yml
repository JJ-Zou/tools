# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: tools
  IMAGE_TAG: ${{ github.sha }}
  REDIS_HOST: ${{ secrets.REDIS_HOST }}
  MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
  MYSQL_DB: ${{ secrets.MYSQL_DB }}
  MYSQL_USER: ${{ secrets.MYSQL_USER }}
  MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
  MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
  MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
  TO_MAIL: ${{ secrets.TO_MAIL }}
  PORT: ${{ secrets.SERVER_PORT }}

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: chmod for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew bootJar -x test

      - name: Log into registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ secrets.DOCKER_HUB_USER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}


  deploy:
    name: deploy to ecs
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Connect to server
        uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Setup knownhosts
        run: ssh-keyscan ${{ secrets.DEPLOYMENT_HOST }} >> ~/.ssh/known_hosts

      - name: Trigger server deployment script
        run: |
          ssh root@${{ secrets.DEPLOYMENT_HOST }} "docker pull ${{ secrets.DOCKER_HUB_USER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          ssh root@${{ secrets.DEPLOYMENT_HOST }} "docker stop ${{ env.IMAGE_NAME }} || true"
          ssh root@${{ secrets.DEPLOYMENT_HOST }} "docker rm ${{ env.IMAGE_NAME }} || true"
          ssh root@${{ secrets.DEPLOYMENT_HOST }} "docker run -p ${{ env.PORT }}:${{ env.PORT}} -e MYSQL_HOST=${{ env.MYSQL_HOST }} -e MYSQL_USER=${{ env.MYSQL_USER }} -e MYSQL_PASSWORD=${{ env.MYSQL_PASSWORD }} -e REDIS_HOST=${{ env.REDIS_HOST }} -e MYSQL_DB=${{ env.MYSQL_DB }} -e MAIL_USERNAME=${{ env.MAIL_USERNAME }} -e MAIL_PASSWORD=${{ env.MAIL_PASSWORD }} -e TO_MAIL=${{ env.TO_MAIL }} --name ${{ env.IMAGE_NAME }} -d --restart=always ${{ secrets.DOCKER_HUB_USER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          ssh root@${{ secrets.DEPLOYMENT_HOST }} "docker image prune -a -f || true"
